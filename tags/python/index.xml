<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Igor Pejic&#39;s Blog</title>
    <link>http://localhost:46009/tags/python/</link>
    <description>Recent content in Python on Igor Pejic&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Igor Pejic</copyright>
    <lastBuildDate>Sat, 25 Nov 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:46009/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Global Interpreter Lock (GIL) in Python: Past, Present, and Future</title>
      <link>http://localhost:46009/posts/gil/</link>
      <pubDate>Sat, 25 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:46009/posts/gil/</guid>
      <description>Understanding the Global Interpreter Lock (GIL) in Python The Global Interpreter Lock, commonly known as GIL, has been a significant aspect of CPython (the reference implementation of Python) for decades. This post explores the GIL&amp;rsquo;s history, its current state, and the exciting future developments that could revolutionize Python&amp;rsquo;s concurrency model.&#xA;What is the GIL? The GIL is a mutex (or a lock) that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once.</description>
    </item>
  </channel>
</rss>
